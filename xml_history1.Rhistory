

tryCatch( xmlTreeParse("<a><b></a>", asText = TRUE, error = NULL),
XMLError = function(e) {
cat("There was an error in the XML at line",
e$line, "column", e$col, "\n",
e$message, "\n")
})


f = system.file("exampleData", "size.xml", package = "XML")
xmlToDataFrame(f, c("integer", "integer", "numeric"))
# Drop the middle variable.
z = xmlToDataFrame(f, colClasses = list("integer", NULL, "numeric"))
# This illustrates how we can get a subset of nodes and process
# those as the "data nodes", ignoring the others.
f = system.file("exampleData", "tides.xml", package = "XML")
doc = xmlParse(f)
xmlToDataFrame(nodes = xmlChildren(xmlRoot(doc)[["data"]]))
# or, alternatively
xmlToDataFrame(nodes = getNodeSet(doc, "//data/item"))
f = system.file("exampleData", "kiva_lender.xml", package = "XML")
doc = xmlParse(f)
dd = xmlToDataFrame(getNodeSet(doc, "//lender"))
f = system.file("odm1.3_fullAll_items_2013-01-30-094910395","sqnm.xml", package="XML")
doc=xmlParse(f)
load XML
library(XML)
library("XML")
library(XML)
load.library(xml)
library()
library(XML,lib=".")
library(XML)
f = system.file("odm1.3_fullAll_items_2013-01-30-094910395","sqnm.xml", package="XML")
doc=xmlParse(f)
xmlToDataFrame(nodes = xmlChildren(xmlRoot(doc)[["data"]]))
library(XML)
?data
data
data()
data(women)
woman
women
dim(women)
len(women)
length(women)
length(women[1])
length(women[0])
length(women[1,])
length(women[,1])
women$0
women$1
type(women)
class(women)
class(women)
library(XML)
savehistory("~/Documents/R/CIDSC-ODM/xml_history1.Rhistory")
